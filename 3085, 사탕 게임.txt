#include <iostream>
#include <algorithm>

char candy[60][60];
int maxValue;
int n;

void update() {
	int cnt = 1;
	for (int y = 0; y < n; ++y) {
		for (int x = 0; x < n; ++x) {
			if ((candy[y][x] == candy[y][x + 1]) && (x + 1 < n))
				cnt++;
			else cnt = 1;
			maxValue = std::max(cnt, maxValue);
		}
	}

	for (int x = 0; x < n; ++x) {
		for (int y = 0; y < n; ++y) {
			if ((candy[y][x] == candy[y + 1][x]) && (y + 1 < n))
				cnt++;
			else cnt = 1;
			maxValue = std::max(cnt, maxValue);
		}
	}
}

int main() {
	scanf("%d", &n);

	for (int i = 0; i < n; ++i)
		for (int j = 0; j < n; ++j)
			scanf(" %c", &candy[i][j]);

	for (int y = 0; y < n; ++y) {
		for (int x = 0; x < n; ++x) {
			if (x + 1 < n && candy[y][x] != candy[y][x + 1]) {
				std::swap(candy[y][x], candy[y][x + 1]);
				update();
				std::swap(candy[y][x], candy[y][x + 1]);
			}
			if (y + 1 < n && candy[y][x] != candy[y + 1][x]) {
				std::swap(candy[y][x], candy[y + 1][x]);
				update();
				std::swap(candy[y][x], candy[y + 1][x]);
			}
		}
	}

	printf("%d\n", maxValue);
	return 0;
}